name: Devops -java ci with github action

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: [Linux]
    outputs:
      BINARY_NAME: ${{ steps.set_artifacts_info.outputs.BINARY_NAME }}
      ACCOUNT_NAME: ${{ steps.set_artifacts_info.outputs.ACCOUNT_NAME }}
      CONTAINER_NAME: ${{ steps.set_artifacts_info.outputs.CONTAINER_NAME }}
    steps:
      - name: checkout Git Repository
        uses: actions/checkout@v3


      - name: Checkout Git repository
        uses: actions/checkout@v3

      # 해당 프로젝트에 맞는 jdk..버전 확인후, 현재 runner 서버 내부에 있는 jdk 파일 경로지정필요
      # overwite-settings를 false로 설정, .Runner  내부의 settings.xml사용. 
      - uses: actions/setup-java@v4
        with:
          distribution: jdkfile
          java-version: '17.0.10'
          jdkfile: '/home/oyj/actions-runner/languages/java/17.0.10/microsoft-jdk-17.0.15-linux-x64.tar.gz'
          overwrite-settings: false
          cache: maven
      # 해당 프로젝트에 맞는 Maven 버전.. 현재 runner서버 내부에 있는 maven파일의 path 지정 필요..cancel-timeout-minutes: 
      - name: Set up Maven
        uses: hb0730/maven-action@v1.0.2
        with: 
          maven-file: /home/oyj/actions-runner/build-tools/maven/3.8.1/apache-maven-3.8.1-bin.tar.gz

      - name: Build with Maven
        run: mvn clean package; echo $?

      


      - name: Upload JAR to Azure Blob Storage
        run: |
         echo "Uploading JAR file..."
         az storage blob upload \
               --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
               --account-key ${{ secrets.AZURE_STORAGE_KEY }} \
               --container-name ${{ secrets.AZURE_CONTAINER_NAME }} \
               --file target/demo-0.0.1-SNAPSHOT.jar \
               --name your-app.jar
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
     
      - name: Done
        run: echo "✅ JAR uploaded successfully!"
#name: Maven Build and Upload to Azure Blob Storage
#
#on:
#  push:
#    branches:
#      - main # Trigger on pushes to the main branch
#
#jobs:
#  build-and-upload:
#    runs-on: ubuntu-latest # Use a Linux runner
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4 # Action to checkout your repository code
#
#      - name: Set up Java Development Kit (JDK)
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17' # Specify your Java version (e.g., '11', '17', '21')
#          distribution: 'temurin' # Choose a JDK distribution (e.g., 'temurin', 'adopt')
#          cache: 'maven' # Cache Maven dependencies for faster builds
#
#      - name: Build with Maven
#        run: mvn clean install -DskipTests # Build the project, skipping tests to speed up the workflow
#
#      - name: Find JAR file
#        id: find_jar
#        run: |
#          # Find the JAR file in the target directory.
#          # Assumes only one JAR is produced by the build.
#          JAR_FILE=$(find target -name "*.jar" -not -name "*javadoc.jar" -not -name "*sources.jar" | head -n 1)
#          if [ -z "$JAR_FILE" ]; then
#            echo "Error: No JAR file found in target directory!"
#            exit 1
#          fi
#          echo "Found JAR: $JAR_FILE"
#          echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT # Set output variable for later steps
#
#      - name: Azure Login
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }} # Use the Azure Service Principal credentials from GitHub Secrets
#
#      - name: Upload JAR to Azure Blob Storage
#        uses: azure/cli@v1 # Use the Azure CLI action to run az commands
#        with:
#          inlineScript: |
#            echo "Uploading ${{ steps.find_jar.outputs.jar_path }} to Azure Blob Storage..."
#            az storage blob upload \
#              --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
#              --container-name ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }} \
#              --file ${{ steps.find_jar.outputs.jar_path }} \
#              --name $(basename ${{ steps.find_jar.outputs.jar_path }}) \
#              --overwrite true # Overwrite if a blob with the same name already exists
#            echo "Successfully uploaded JAR to Azure Blob Storage."
#
#
#
#
