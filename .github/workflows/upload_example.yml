name: Maven Build and Upload to Azure Blob Storage

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  build-and-upload:
    runs-on: ubuntu-latest # Use a Linux runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          java-version: '17' # Specify your Java version (e.g., '11', '17', '21')
          distribution: 'temurin' # Choose a JDK distribution (e.g., 'temurin', 'adopt')
          cache: 'maven' # Cache Maven dependencies for faster builds

      - name: Build with Maven
        run: mvn clean install -DskipTests # Build the project, skipping tests to speed up the workflow

      - name: Find JAR file
        id: find_jar
        run: |
          # Find the JAR file in the target directory.
          # Assumes only one JAR is produced by the build.
          JAR_FILE=$(find target -name "*.jar" -not -name "*javadoc.jar" -not -name "*sources.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No JAR file found in target directory!"
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"
          echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT # Set output variable for later steps

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Use the Azure Service Principal credentials from GitHub Secrets

      - name: Upload JAR to Azure Blob Storage
        uses: azure/cli@v1 # Use the Azure CLI action to run az commands
        with:
          inlineScript: |
            echo "Uploading ${{ steps.find_jar.outputs.jar_path }} to Azure Blob Storage..."
            az storage blob upload \
              --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
              --container-name ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }} \
              --file ${{ steps.find_jar.outputs.jar_path }} \
              --name $(basename ${{ steps.find_jar.outputs.jar_path }}) \
              --overwrite true # Overwrite if a blob with the same name already exists
            echo "Successfully uploaded JAR to Azure Blob Storage."



